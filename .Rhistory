setwd("~/Documentos/Manejo-y-normalizacion-de-archivos-AFE")
library(limma)
library(AgiMicroRna)
#Hacer un dataframe de la lista del nombre de los archivos, con tratamiento, repeticiones y el sujeto
targets <- data.frame(
FileName = c("GSM6364066.txt", "GSM6364067.txt", "GSM6364068.txt", "GSM6364069.txt", "GSM6364070.txt", "GSM6364071.txt", "GSM6364072.txt",
"GSM6364073.txt", "GSM6364074.txt", "GSM6364075.txt", "GSM6364076.txt", "GSM6364077.txt", "GSM6364078.txt", "GSM6364079.txt",
"GSM6364080.txt", "GSM6364081.txt", "GSM6364082.txt", "GSM6364083.txt", "GSM6364084.txt", "GSM6364085.txt", "GSM6364086.txt",
"GSM6364087.txt", "GSM6364088.txt", "GSM6364089.txt", "GSM6364090.txt", "GSM6364091.txt", "GSM6364092.txt", "GSM6364093.txt",
"GSM6364094.txt","GSM6364095.txt" ),
Treatment  = rep("A",30),
GErep = c(1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 3, 1, 2, 3, 1, 2, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2),
Subject = c(26, 26, 26, 27, 27, 27, 3, 3, 3, 48, 48, 48, 49, 49, 50, 50, 50, 51, 51, 52, 52, 52, 53, 53, 53, 1, 1, 1, 2, 2)
)
`read.agiMicroRna` <-
function(targets,columns=NULL,other.columns = NULL,annotation=NULL,
exp.names=NULL,verbose=FALSE){
## code adapted from read.maimages function from limma package
## it creates the uRNAList class: see AgiMicroRNA-classes.R for
## the definition of this class and associated methods
filess=as.character(targets$FileName)
if (is.null(filess)) {
stop("targets frame doesn't contain FileName column")
}
if (is.null(columns)){
columns=list(TGS="gTotalGeneSignal",
TPS="gTotalProbeSignal",
meanS="gMeanSignal",
procS="gProcessedSignal")
}
if (!is.list(columns)){
stop("columns must be a list")
}
if (is.null(other.columns)){
other.columns=list(IsGeneDetected="gIsGeneDetected",
IsSaturated="gIsSaturated",
IsFeatNonUnifOF="gIsFeatNonUnifOL",
IsFeatPopnOL="gIsFeatPopnOL",
BGKmd="gBGMedianSignal",
BGKus="gBGUsed")
}
if (!is.list(other.columns)){
stop("other.columns must be a list")
}
if (is.null(exp.names)){
annotation = c("ControlType", "ProbeName", "SystematicName")
}
if (is.null(exp.names)){
exp.names = rownames(targets)
}
cnames <- names(columns)
required.col = unique(c(annotation, unlist(columns), unlist(other.columns)))
obj = read.columns(filess[1], required.col, text.to.search="",skip = 9,
sep = "\t",quote="\"", stringsAsFactors = FALSE,flush=TRUE)
narray = length(filess)
ngenes = dim(obj)[1]
# ngenes = length(scan(filess[1],skip=10,what="integer",flush=TRUE,quiet=TRUE))
Y = matrix(NA, nrow = ngenes, ncol = narray)
colnames(Y) =  exp.names
# R, B, Rb, Gb
Newagi = columns
for (a in cnames){
Newagi[[a]] <- Y
}
# targets
Newagi$targets = data.frame(targets$FileName)
rownames(Newagi$targets) = exp.names
colnames(Newagi$targets) = "FileName"
# $genes ("ControlType", "ProbeName", "SystematicName")
j <- match(annotation, colnames(obj), 0)
if (any(j > 0)){
Newagi$genes <- data.frame(obj[, j, drop = FALSE], check.names = FALSE)
}
# $other
other.columns <- as.character(other.columns)
j <- match(other.columns, colnames(obj), 0)
if (any(j > 0)) {
other.columns <- colnames(obj)[j]
Newagi$other = list()
for (j in other.columns) Newagi$other[[j]] <- Y
}
for(n in 1:narray) {
if(verbose){
cat("reading file ",n," - ",filess[n],"\n")
}
if(n > 1){
obj = read.columns(filess[n], required.col, text.to.search="",skip = 9,
sep = "\t",quote="\"", stringsAsFactors = FALSE,flush=TRUE)
}
for (a in cnames){
Newagi[[a]][, n] <- obj[, columns[[a]]]    # R, G, Rb, Gb
}
for (j in other.columns) {
Newagi$other[[j]][, n] <- obj[, j]
}
} ## for
# defined in AgiMicroRNA-classes.R USING classes.R limma FILE
new("uRNAList", Newagi)
} ## end function
# Leer los archivos AFE usando la función definida
dd <- read.agiMicroRna(targets,
columns=list(TGS="gTotalGeneSignal",
TPS="gTotalProbeSignal",
meanS="gMedianSignal",
procS="gProcessedSignal"),
other.columns=list(IsGeneDetected="gIsGeneDetected",
IsSaturated="gIsSaturated",
IsFeatNonUnifOF="gIsFeatNonUnifOL",
IsFeatPopnOL="gIsFeatPopnOL",
BGKmd="gBGMedianSignal"),
annotation = c( "ControlType", "ProbeName", "SystematicName"),
verbose=TRUE)
#Construir una matriz de niveles de expresion de los mirnas (sin normalizar )
eset_mirna <- esetMicroRna(dd, targets)
expr_mirna <- exprs(eset_mirna)
annotation <- vroom::vroom("GSM6364088.txt", skip = 9, .name_repair = janitor::make_clean_names)
rownames(expr_mirna) <- annotation$systematic_name
is_mirna <- grep("^hsa", rownames(expr_mirna))
mirna_exprMat <- expr_mirna[is_mirna,]
png("ddNORM.png", width = 800, height = 600)
pdf("ddNORM.pdf", width = 8, height = 6)
ddNORM=tgsNormalization(dd,"quantile",
makePLOTpre=TRUE,
makePLOTpost=TRUE,
targets=targets,
verbose=TRUE)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
png("ddNORM.png", width = 800, height = 600)
pdf("ddNORM.pdf", width = 8, height = 6)
ddNORM=tgsNormalization(dd,"quantile",
makePLOTpre=TRUE,
makePLOTpost=TRUE,
targets=targets,
verbose=TRUE)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
png("ddNORM.png", width = 800, height = 600)
pdf("ddNORM.pdf", width = 8, height = 6)
ddNORM=tgsNormalization(dd,"quantile",
makePLOTpre=TRUE,
makePLOTpost=TRUE,
targets=targets,
verbose=TRUE)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
png("ddNORM.png", width = 800, height = 600)
pdf("ddNORM.pdf", width = 8, height = 6)
ddNORM=tgsNormalization(dd,"quantile",
makePLOTpre=TRUE,
makePLOTpost=TRUE,
targets=targets,
verbose=TRUE)
dev.off()
dev.off()
png("ddNORM.png", width = 800, height = 600)
#pdf("ddNORM.pdf", width = 8, height = 6)
ddNORM=tgsNormalization(dd,"quantile",
makePLOTpre=TRUE,
makePLOTpost=TRUE,
targets=targets,
verbose=TRUE)
dev.off()
png("ddNORM.png", width = 800, height = 600)
#pdf("ddNORM.pdf", width = 8, height = 6)
ddNORM=tgsNormalization(dd,"quantile",
makePLOTpre=TRUE,
makePLOTpost=TRUE,
targets=targets,
verbose=TRUE)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
png("ddNORM.png", width = 800, height = 600)
#pdf("ddNORM.pdf", width = 8, height = 6)
ddNORM=tgsNormalization(dd,"quantile",
makePLOTpre=TRUE,
makePLOTpost=TRUE,
targets=targets,
verbose=TRUE)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
png("ddNORM.png", width = 800, height = 600)
#pdf("ddNORM.pdf", width = 8, height = 6)
ddNORM=tgsNormalization(dd,"quantile",
makePLOTpre=TRUE,
makePLOTpost=TRUE,
targets=targets,
verbose=TRUE)
if (dev.cur() > 1) dev.off()  # Cierra el dispositivo gráfico PNG si está abierto
rownames(norm_expr) <- annotation$systematic_name
# Extraer los datos normalizados de la señal procesada
norm_expr <- ddNORM$procS
norm_expr_names <- ddNORM$genes
combined_df <- cbind(norm_expr, norm_expr_names)
#Obtener la matriz de normalizacion por quantiles con el nombre de los mirnas
rownames(norm_expr) <- annotation$systematic_name
is_mirna <- grep("^hsa", rownames(norm_expr))
mirna_matriz <- norm_expr[is_mirna,]
write.csv(mirna_matriz, file = "norm_expr_quantil_mirnas.csv")
View(mirna_matriz)
library(preprocessCore)
mat_normalized <- normalize.quantiles(mirna_exprMat)
rownames(mat_normalized) <- rownames(mirna_exprMat)
colnames(mat_normalized)<- colnames(mirna_exprMat)
View(mat_normalized)
#Aplicar mediana para colapsar mirnas y tener un mirna un nivel de expresion
colMedians=function(mat,na.rm=TRUE){
return(apply(mat,2,median,na.rm=na.rm))}
precolaps <- data.frame(rownames(mat_normalized), mat_normalized)
precolaps[1:10,1:10]
colapsed <- do.call(rbind, lapply(split(precolaps,precolaps[,1]), function(chunk) {colMedians(chunk[,-1])}))
mirna_matrix <- as.matrix(colapsed)
mirna_matrix_colapsed <- as.matrix(colapsed)
View(mirna_matrix_colapsed)
write.csv(mirna_matrix_colapsed, file = "matriz_mirnas_colapsada.csv")
#Boxplots (Comparación antes y después de la normalización)
par(mfrow=c(1,2))
boxplot(mirna_exprMat, main = "Antes de la normalización", outline=FALSE, las=2)
boxplot(mat_normalized, main = "Después de la normalización", outline=FALSE, las=2)
pdf("boxplots_normalization.pdf", width = 8, height = 6)
par(mfrow=c(1,2))
boxplot(mirna_exprMat, main = "Antes de la normalización", outline=FALSE, las=2)
boxplot(mat_normalized, main = "Después de la normalización", outline=FALSE, las=2)
dev.off()
#heatmap será útil para visualizar las similitudes y diferencias entre los niveles de expresión de los microRNAs entre las muestras.
library(pheatmap)
pheatmap(mirna_matrix_colapsed, cluster_rows = TRUE, cluster_cols = TRUE,
main = "Heatmap de microRNAs normalizados")
pheatmap(mirna_matrix_colapsed, cluster_rows = TRUE, cluster_cols = TRUE,
main = "Heatmap de microRNAs normalizados")
#Gráficos de Densidad (Distribuciones de expresión)
plot(density(as.vector(mirna_exprMat)), col = "red", main = "Densidad de microRNAs", xlim = c(0, 16))
lines(density(as.vector(mat_normalized)), col = "blue")
legend("topright", legend = c("Antes", "Después"), col = c("red", "blue"), lty = 1)
save.image("~/Documentos/Manejo-y-normalizacion-de-archivos-AFE/sesion.RData")
#Gráficos de Densidad (Distribuciones de expresión)
plot(density(as.vector(mirna_exprMat)), col = "red", main = "Densidad de microRNAs", xlim = c(0, 16))
lines(density(as.vector(mat_normalized)), col = "blue")
legend("topright", legend = c("Antes", "Después"), col = c("red", "blue"), lty = 1)
setwd("~/Documentos/Manejo-y-normalizacion-de-archivos-AFE_Borrador")
library(GEOquery)
library(limma)
# Descargar un archivo GSM_mRNAs RNAs MENSAJEROS
gsm_mensajeros <- getGEO("GSE208143", GSEMatrix = TRUE)
# Extraer los datos de la muestra
gsm_data_mensajeros <- exprs(gsm_mensajeros[[1]])
# Extraer los datos de la muestra
gsm_data_mensajeros <- exprs(gsm_mensajeros[[1]])
# Mostrar las primeras filas de los datos
head(gsm_data_mensajeros)
# Verificar los datos
summary(gsm_data_mensajeros)
# Limpiar los datos (por ejemplo, eliminar filas con NA)
gsm_data_clean_mensajeros <- na.omit(gsm_data_mensajeros)
# Normalización por quantiles
norm_data_mensajeros <- normalizeBetweenArrays(gsm_data_clean_mensajeros, method = "quantile")
View(norm_data_mensajeros)
View(gsm_mensajeros)
# Mostrar las primeras filas de los datos normalizados
head(norm_data_mensajeros)
mensajeros <- norm_data_mensajeros
# Visualización con boxplot antes y después de la normalización
par(mfrow=c(1,2))
boxplot(gsm_data_clean_mensajeros, main = "Antes de la normalización")
boxplot(mensajeros, main = "Después de la normalización")
#Guarda los datos normalizados
write.csv(mensajeros, "datos_normalizados_mRNAs.csv", row.names = TRUE)
setwd("~/Documentos/Manejo-y-normalizacion-de-archivos-AFE")
#cargar los paquetes
library(GEOquery)
library(limma)
# Descargar archivo GSM_miRNAs de RB
gsm_mirna <- getGEO("GSE208677", GSEMatrix = TRUE)
# Extraer los datos de la muestra
gsm_data_mirna <- exprs(gsm_mirna[[1]])
# Mostrar las primeras filas de los datos
head(gsm_data_mirna)
# Verificar los datos
summary(gsm_data_mirna)
# Limpiar los datos (por ejemplo, eliminar filas con NA)
gsm_data_clean_mirna <- na.omit(gsm_data_mirna)
# Normalización por quantiles
norm_data_mirna <- normalizeBetweenArrays(gsm_data_clean_mirna, method = "quantile")
# Mostrar las primeras filas de los datos normalizados
head(norm_data_mirna)
mirnas <- norm_data_mirna
# Visualización con boxplot antes y después de la normalización
par(mfrow=c(1,2))
boxplot(gsm_data_clean_mirna, main = "Antes de la normalización")
boxplot(mirnas, main = "Después de la normalización")
#Guarda los datos normalizados
write.csv(mirnas, "datos_normalizados_miRNAs.csv", row.names = TRUE)
# Descargar un archivo GSM_mRNAs RNAs MENSAJEROS
gsm_mensajeros <- getGEO("GSE208143", GSEMatrix = TRUE)
# Extraer los datos de la muestra
gsm_data_mensajeros <- exprs(gsm_mensajeros[[1]])
# Mostrar las primeras filas de los datos
head(gsm_data_mensajeros)
# Verificar los datos
summary(gsm_data_mensajeros)
# Limpiar los datos (por ejemplo, eliminar filas con NA)
gsm_data_clean_mensajeros <- na.omit(gsm_data_mensajeros)
# Normalización por quantiles
norm_data_mensajeros <- normalizeBetweenArrays(gsm_data_clean_mensajeros, method = "quantile")
# Mostrar las primeras filas de los datos normalizados
head(norm_data_mensajeros)
mensajeros <- norm_data_mensajeros
# Visualización con boxplot antes y después de la normalización
par(mfrow=c(1,2))
boxplot(gsm_data_clean_mensajeros, main = "Antes de la normalización")
boxplot(mensajeros, main = "Después de la normalización")
#Guarda los datos normalizados
write.csv(mensajeros, "datos_normalizados_mRNAs.csv", row.names = TRUE)
#Boxplots (Comparación antes y después de la normalización)
# Abrir un dispositivo gráfico para PDF
pdf("boxplots_normalization_mensajeros.pdf", width = 8, height = 6)
par(mfrow=c(1,2))
boxplot(gsm_data_clean_mensajeros, main = "Antes de la normalización", outline=FALSE, las=2)
boxplot(mensajeros, main = "Después de la normalización", outline=FALSE, las=2)
dev.off()
annotation <- vroom::vroom("GSM6338047_26_R2.txt", skip = 9, .name_repair = janitor::make_clean_names)
View(annotation)
rownames(mensajeros) <- annotation$systematic_name
View(annotation)
annotation <- vroom::vroom("GSM6338047_26_R2.txt", skip = 9, .name_repair = janitor::make_clean_names)
# annotation
gconvert <- gconvert(query=annotation$systematic_name, target="HGNC", mthreshold=1, filter_na=FALSE)
library(gProfileR)
# annotation
gconvert <- gconvert(query=annotation$systematic_name, target="HGNC", mthreshold=1, filter_na=FALSE)
install.packages("gprofiler2")
detach("package:gProfileR", unload = TRUE)
install.packages("plotly")
install.packages("plotly")
install.packages("gprofiler2")
library(gprofiler2)
# annotation
gconvert <- gconvert(query=annotation$systematic_name, target="HGNC", mthreshold=1, filter_na=FALSE)
View(gconvert)
class(gconvert[,1])<-"integer"
gconvert<- gconvert[sort.list(gconvert[,1]),]
genesymbol <- gconvert[,5]
genesymbol<-ifelse(genesymbol=="N/A", as.vector(rownames(edata)), as.vector(genesymbol))
genesymbol <- gconvert[,5]
View(mensajeros)
nas <- is.na(genesymbol)
nas <- wich (is.na(genesymbol))
nas <- which (is.na(genesymbol))
keep <- which (!is.na(genesymbol))
genesymbol <- genesymbol[keep]
mensajeros <- mensajeros[keep,]
dim(mensajeros)
rownames(mensajeros)
grep("A_19_", annotation$probe_name)
length (grep("A_19_", annotation$probe_name))
length (grep("^A_", annotation$probe_name))
# Vector de nombres
vec_nombres <- rownames(mensajeros)
df <- data.frame(
nombres = annotation$probe_name,
valores = annotation$systematic_name
)
# Convertir el vector a un data frame
df_vec <- data.frame(nombres = vec_nombres)
# Hacer el left join usando merge()
resultado <- merge(df_vec, df, by = "nombres", all.x = TRUE)
View(resultado)
# annotation
gconvert <- gconvert(query=resultado$valores, target="HGNC", mthreshold=1, filter_na=FALSE)
class(gconvert[,1])<-"integer"
gconvert<- gconvert[sort.list(gconvert[,1]),]
genesymbol <- gconvert[,5]
duplicated(resultado$valores)
duplicated(resultado$nombres)
sum(duplicated(resultado$nombres))
sum(duplicated(rownames(mensajeros)))
resultado[duplicated(resultado$nombres),]
unique(resultado$nombres)
resultado[unique(resultado$nombres),]
unique(resultado$nombres)
length(unique(resultado$nombres))
which(unique(resultado$nombres))
resultado[duplicated(resultado$nombres),]
resultado[duplicated(resultado$nombres),]
duplicated(resultado$nombres)
sum(duplicated(resultado$nombres))
which(!duplicated(resultado$nombres))
resultado[which(!duplicated(resultado$nombres)),]
resultado_f <- resultado[which(!duplicated(resultado$nombres)),]
# annotation
gconvert <- gconvert(query=resultado_f$valores, target="HGNC", mthreshold=1, filter_na=FALSE)
View(gconvert)
class(gconvert[,1])<-"integer"
gconvert<- gconvert[sort.list(gconvert[,1]),]
genesymbol <- gconvert[,5]
keep <- which (!is.na(genesymbol))
genesymbol <- genesymbol[keep]
mensajeros <- mensajeros[keep,]
sum(duplicated(genesymbol))
colMedians=function(mat,na.rm=TRUE) {return(apply(mat,2,median,na.rm=na.rm))}
precolaps <- data.frame(genesymbol, mensajeros)
colapsed <- do.call(rbind, lapply(split(precolaps,precolaps[,1]), function(chunk) {colMedians(chunk[,-1])}))
View(colapsed)
